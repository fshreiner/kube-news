# Serviço do banco de dados PostgreSQL (v14.18), responsável por armazenar os dados da aplicação.
services:
  postgres:
    image: postgres:14.18
    restart: on-failure
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-docker-volume:/var/lib/postgresql/data
    networks:
      - kubenews-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Serviço da aplicação Kubenews, que depende do PostgreSQL e expõe o serviço na porta 8080.
  kubenews:
    build:
      context: ./src
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    restart: on-failure
    memswap_limit: 2G
    deploy:
     resources:
      limits:
        cpus: "2" 
        memory: 2G
    depends_on:
      - postgres
    environment:
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_DATABASE=${POSTGRES_DB}
      - DB_HOST=postgres
    networks:
      - kubenews-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

# Volume Docker para persistência dos dados do PostgreSQL, garantindo que não sejam perdidos em reinícios.
volumes:
  postgres-docker-volume:
    name: postgre-kubenews-db

# Rede bridge personalizada para comunicação interna entre os serviços da aplicação.
networks:
  kubenews-network:
    name: kubenews-network
    driver: bridge